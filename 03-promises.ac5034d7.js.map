{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,QAElCC,EAAW,GAEfH,EAAOI,iBAAiB,SAkDxB,SAAsBC,GACpBF,EAASE,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,K,IAlDrCR,EAAOI,iBAAiB,UAGxB,SAAsBC,GACpBA,EAAEI,iBACF,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAASQ,OAAQD,GAAK,EAEtCP,EAASS,MADD,IAANF,EACeG,OAAOV,EAASS,OAASC,OAAOV,EAASW,MAAQJ,EAEjDG,OAAOV,EAASS,OAASC,OAAOV,EAASW,MAE5DC,EAAcZ,GACXa,MAAK,SAAAC,G,IAAGC,EAAQD,EAARE,SAAUP,EAAKK,EAALL,MACjBQ,YACE,W,OACEC,EAAAvB,GAASwB,OAAOC,QACd,qBAAoCC,OAAfN,EAAS,QAAYM,OAANZ,EAAM,MAC1C,CACEa,aAAa,G,GAGnBb,E,IAGHc,OAAM,SAAAT,G,IAAGL,EAAKK,EAALL,MAAOe,EAAQV,EAARE,SACfC,YACE,W,OACEC,EAAAvB,GAASwB,OAAOM,QACd,qBAAoCJ,OAAfG,EAAS,QAAYH,OAANZ,EAAM,MAC1C,CACEa,aAAa,G,GAGnBb,E,OA/BV,IAAIiB,EAAW,EAoCf,SAASd,EAAcE,G,IAAEL,EAAFK,EAAEL,MAAFK,EAASH,KAATG,EAAeN,OACpC,OAAO,IAAImB,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCN,GAAY,EACRI,EACFF,EAAQ,CAAEZ,SAAAU,EAAUjB,UAEpBoB,EAAO,CAAEb,SAAAU,EAAUjB,S","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('form');\n\nlet formData = {};\n\nformEl.addEventListener('input', onInputValue);\nformEl.addEventListener('submit', onFormSubmit);\n\nlet position = 0;\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  for (let i = 0; i < formData.amount; i += 1) {\n    if (i === 0) {\n      formData.delay = Number(formData.delay) + Number(formData.step) * i;\n    } else {\n      formData.delay = Number(formData.delay) + Number(formData.step);\n    }\n    createPromise(formData)\n      .then(({ position, delay }) => {\n        setTimeout(\n          () =>\n            Notiflix.Notify.success(\n              `Fulfilled promise ${position} in ${delay}ms`,\n              {\n                closeButton: true,\n              }\n            ),\n          delay\n        );\n      })\n      .catch(({ delay, position }) => {\n        setTimeout(\n          () =>\n            Notiflix.Notify.failure(\n              `Fulfilled promise ${position} in ${delay}ms`,\n              {\n                closeButton: true,\n              }\n            ),\n          delay\n        );\n      });\n  }\n}\nfunction createPromise({ delay, step, amount }) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    position += 1;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\nfunction onInputValue(e) {\n  formData[e.target.name] = e.target.value;\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$formData","addEventListener","e","target","name","value","preventDefault","i","amount","delay","Number","step","$ce04d3a99e08e73b$var$createPromise","then","param","position1","position","setTimeout","$parcel$interopDefault","Notify","success","concat","closeButton","catch","position2","failure","$ce04d3a99e08e73b$var$position","Promise","resolve","reject","shouldResolve","Math","random"],"version":3,"file":"03-promises.ac5034d7.js.map"}